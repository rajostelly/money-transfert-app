// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
  MADAGASCAR_TEAM
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum TransferStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransferType {
  SUBSCRIPTION
  ONE_TIME
}

enum NotificationType {
  TRANSFER_REMINDER
  TRANSFER_COMPLETED
  TRANSFER_FAILED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELLED
  PAYMENT_FAILED
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  phone     String?
  role      UserRole   @default(CLIENT)
  status    UserStatus @default(ACTIVE)
  stripeCustomerId String? @unique
  emailVerified Boolean @default(false)
  emailVerificationToken String? @unique
  emailVerificationTokenExpiresAt DateTime?
  resetToken String? @unique
  resetTokenExpiry DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  subscriptions Subscription[]
  beneficiaries Beneficiary[]
  transfers     Transfer[]
  notifications Notification[]

  @@map("users")
}

model Beneficiary {
  id          String  @id @default(cuid())
  userId      String
  name        String
  phone       String
  address     String?
  city        String
  country     String  @default("Madagascar")
  operator    String? // Mobile money operator (Orange Money, Airtel Money, etc.)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  transfers     Transfer[]

  @@map("beneficiaries")
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  beneficiaryId   String
  amountCAD       Decimal            @db.Decimal(10, 2)
  frequency       String             // "monthly", "weekly", "bi-weekly"
  nextTransferDate DateTime
  status          SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?       @unique
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  transfers   Transfer[]

  @@map("subscriptions")
}

model Transfer {
  id              String        @id @default(cuid())
  userId          String
  beneficiaryId   String
  subscriptionId  String?
  amountCAD       Decimal       @db.Decimal(10, 2)
  amountMGA       Decimal       @db.Decimal(15, 2)
  exchangeRate    Decimal       @db.Decimal(10, 6)
  feeCAD          Decimal       @db.Decimal(10, 2)
  totalCAD        Decimal       @db.Decimal(10, 2)
  type            TransferType
  status          TransferStatus @default(PENDING)
  stripePaymentIntentId String?
  confirmedAt     DateTime?
  confirmedBy     String?       // User ID of Madagascar team member
  
  // Mobile Money automation fields
  autoProcessed   Boolean       @default(false)  // Whether this was processed automatically
  mobileMoneyTransactionId String?              // Transaction ID from mobile money provider
  mobileMoneyError String?                      // Error message if mobile money transfer failed
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  beneficiary  Beneficiary   @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("transfers")
}

model ExchangeRate {
  id        String   @id @default(cuid())
  fromCurrency String @default("CAD")
  toCurrency   String @default("MGA")
  rate      Decimal  @db.Decimal(10, 6)
  createdAt DateTime @default(now())

  @@map("exchange_rates")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Audit Log Model for Compliance (PCI DSS Requirement 10)
model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String   // e.g., "LOGIN", "TRANSFER_CREATE", "PAYMENT_SUCCESS"
  resource   String   // e.g., "USER_AUTH", "TRANSFER", "PAYMENT"
  resourceId String?  // ID of the resource being acted upon
  oldValues  String?  // JSON string of old values (masked for sensitive data)
  newValues  String?  // JSON string of new values (masked for sensitive data)
  ipAddress  String?
  userAgent  String?
  metadata   String?  // Additional context as JSON
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

// Stripe Reliability Monitoring
model StripeReliabilityLog {
  id           String   @id @default(cuid())
  type         String   // "PAYMENT_INTENT", "SUBSCRIPTION", "INVOICE"
  success      Boolean
  stripeId     String
  errorCode    String?
  errorMessage String?
  amount       String?  // Stored as string to avoid precision issues
  currency     String?
  userId       String?
  timestamp    DateTime @default(now())

  @@index([timestamp])
  @@index([success])
  @@index([type])
  @@map("stripe_reliability_logs")
}

// Aggregated Stripe Metrics for Reporting
model StripeMetrics {
  id                  String   @id @default(cuid())
  failureRate         Decimal  @db.Decimal(5, 4) // e.g., 0.0150 for 1.5%
  totalTransactions   Int
  failedTransactions  Int
  windowStart         DateTime
  windowEnd           DateTime
  createdAt           DateTime @default(now())

  @@index([windowStart])
  @@map("stripe_metrics")
}
